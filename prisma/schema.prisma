// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  username String  @unique
  password String
  role     Role
  isActive Boolean @default(true) @map("is_active")
  // note     Note?

  @@map("users")
}

enum Role {
  MANAGER
  CHEF
  ATTENDANT
}

model Menu {
  id       String   @id @default(uuid())
  name     String
  category Category
  items    Item[]

  @@map("menus")
}

enum Category {
  KITCHEN
  BAR
}

model Item {
  id             String  @id @default(uuid())
  name           String
  description    String?
  price          Decimal @db.Decimal(8, 2)
  imgUrl         String? @map("img_url")
  quantityPeople Int     @default(0) @map("quantity_people")

  orders ItemsOnOrders[]

  Menu   Menu   @relation(fields: [menuId], references: [id])
  menuId String @map("menu_id")

  @@map("items")
}

model Table {
  id          String      @id @default(uuid())
  number      Int?
  nameClient  String?     @map("name_client")
  totalPeople Int?        @map("total_people")
  tableStatus TableStatus @map("table_status")
  createdAt   DateTime    @default(now()) @map("created_at")

  @@map("tables")
}

enum TableStatus {
  RESERVED
  BUSY
  CLOSED
}

model Order {
  id        String          @id @default(uuid())
  price     Decimal?        @db.Decimal(8, 2)
  createdAt DateTime        @default(now()) @map("created_at")
  items     ItemsOnOrders[]

  @@map("orders")
}

model ItemsOnOrders {
  id       String  @id @default(uuid())
  quantity Int
  order    Order?  @relation(fields: [orderId], references: [id])
  orderId  String? @map("order_id")
  item     Item    @relation(fields: [itemId], references: [id])
  itemId   String  @map("item_id")
  note     Note?   @relation(fields: [noteId], references: [id])
  noteId   String? @map("note_id")

  @@map("items_on_orders")
}

model Note {
  id    String          @id @default(uuid())
  items ItemsOnOrders[]
  total Decimal?        @db.Decimal(8, 2)
  // user   User?           @relation(fields: [userId], references: [id])
  // userId String? @unique

  @@map("notes")
}
